Working With Java Data Types

A) Declare and initialize variables (including casting of primitive data types)
B) Differentiate between object reference variables and primitive variables
C) Know how to read or write to object fields
D) Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)
E) Develop code that uses wrapper classes such as Boolean, Double, and Integer


A)Declarar e inicializar variáveis
Quando a variável é membro de uma classe, ela é iniciada implicitamente junto com o objeto com um valor default.
Quando iniciadas implicitamente, os valores default para as variáveis são:
-primitivos numéricos inteiros: 0
-primitivos numéricos com ponto flutuante: 0.0
-boolean: false
-char: vazio, equivalente a 0
-referências: null
Tipos primitivos
Todos os tipos primitivos do Java já estão definidos e não é possível criar novos tipos primitivos. 
São oito os tipos primitivos do Java: byte, short, char, int, long, float, double e boolean.
Os tipos inteiros têm os seguintes tamanhos:
-byte - 1 byte (8 bits, de -128 a 127);
-short - 2 bytes (16 bits, de –32.768 a 32.767);
-char - 2 bytes (só positivo), (16 bits, de 0 a 65.535);
-int - 4 bytes (32 bits, de –2.147.483.648 a 2.147.483.647);
-long - 8 bytes (64 bits, de –9.223.372.036.854.775.808 a 9.223.372.036.854.775.807).
Usando underlines em literais
A regra básica é que eles só podem ser posicionados com valores numéricos em ambos os lados
Identificadores válidos devem seguir as seguintes regras:
-Não podem ser igual a uma palavra-chave;
-Podem usar letras (unicode), números, $ e _;
-O primeiro caractere não pode ser um número;
-Podem possuir qualquer número de caracteres.

Palavras reservadas ou palavras-chave são termos predefinidos da linguagem que podemos usar para definir comandos (if, for, class, entre outras).
São diversas palavras-chave na linguagem java:
abstract
assert
boolean
break
byte
case
catch
char
class
const
continue
default
do
double
else
enum
extends
false
final
finally
float
for
goto
if
implements
import
instanceof
int
interface
long
native
new
null
package
private
protected
public
return
short
static
strictfp
super
switch
synchronized
this
throw
throws
transient
true
try
void
volatile
while

Outras três palavras reservadas que não aparecem nessa lista são true, false e null. Mas, segundo a especificação na linguagem Java, 
esses três termos são considerados literais e não palavras-chave (embora também sejam reservadas), totalizando 53 palavras reservadas.


B)Diferenciar entre variáveis de referências a objetos e tipos primitivos
Duas referências são consideradas iguais somente se elas estão apontando para o mesmo objeto. 
Mesmo que os objetos que elas apontem sejam iguais, ainda são referências para objetos diferentes

C)Lendo ou escrevendo campos de objetos
Ler e escrever propriedades em objetos é uma das tarefas mais comuns em um programa java. Para acessar um atributo, usamos o operador . (ponto), 
junto a uma variável de referência para um objeto.

D)O ciclo de vida de um objeto
Criação de objetos
    Toda vez que usamos o operador new, estamos criando uma nova instância de um objeto na memória
    // Apenas declarando a variável, 
    // nenhum objeto foi criado aqui
    Pessoa p;

    // Agora um objeto foi criado e atribuído a variável
    p = new Pessoa();
Objeto acessível ou inacessível
    A partir do momento em que um objeto foi criado e atribuído a uma variável, dizemos que o objeto está acessível, ou seja, podemos usá-lo em nosso programa
    Pessoa p = new Pessoa(); // criação
    p.nome = "Mário"; // acessando e usando o objeto
    // atribuímos a p o valor null
    // o objeto não está mais acessível
    p = null
    // criando um objeto sem variável
    new Pessoa();
Garbage Collector
    Todo objeto inacessível é considerado elegível para o ::garbage collector::. Nunca temos certeza de quantos objetos passaram pelo garbage collector, logo, 
        somente indique quantos estão passíveis de serem coletados.

E)Chamadas de métodos nos objetos
Além de acessar atributos, também podemos invocar métodos em um objeto. Para isso usamos o operador . (ponto), junto a uma variável de referência para um objeto.
A partir do Java 5, varargs possibilitam um método que receba um número variável (não fixo) de parâmetros. É a maneira de receber um array de objetos e 
possibilitar uma chamada mais fácil do método


F)Manipulando dados usando a classe StringBuilder
Os principais métodos de StringBuffer e StringBuilder são:
append: apenda texto.
insert: Insere texto na posição informada.
delete: deleta texto nas posições informadas
charAt: informa o caracter da posição informada
length(): tamanho da String 
equals: verifica se o objeto é igual ao verificado e não o valor da variavel 
indexOf: informa a posição da string informada na string pesquisada 
lastIndexOf:  informa a ultima posição da string informada na string pesquisada  var str = "time, time"; str.lastIndexOf("time"); //time is at position 6
substring: devolve a substring a partir dos índices de começo e fim;

G)Criando e Manipulando Strings
Devolvem uma nova String:
String toUpperCase() - tudo em maiúscula;
String toLowerCase() - tudo em minúsculo;
String trim() - retira espaços em branco no começo e no fim;
String substring(int beginIndex, int endIndex) - devolve a substring a partir dos índices de começo e fim;
String substring(int beginIndex) - semelhante ao anterior, mas toma a substring a partir do índice passado até o final da String;
String concat(String) - concatena o parâmetro ao fim da String atual e devolve o resultado;
String replace(char oldChar, char newChar) - substitui todas as ocorrências de determinado char por outro;
String replace(CharSequence target, CharSequence replacement) - substitui todas as ocorrências de determinada CharSequence (como String) por outra.