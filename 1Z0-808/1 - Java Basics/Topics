Java Basics 

A) Define the scope of variables 
B) Define the structure of a Java class
C) Create executable Java applications with a main method; run a Java program from the command line; produce console output
D) Import other Java packages to make them accessible in your code
E) Compare and contrast the features and components of Java such as: platform independence, object orientation, encapsulation, etc.

A) Defina o escopo de variáveis
Variáveis locais: Chamamos de locais as variáveis declaradas dentro de métodos ou construtores.
Variáveis de instância ou variáveis de objeto: são os atributos dos objetos. São declaradas dentro da classe, mas fora de qualquer método ou construtor. 
Podem ser acessadas por qualquer membro da classe e ficam em escopo enquanto o objeto existir.
Variáveis estáticas (class variables): Podemos declarar variáveis que são compartilhadas por todas as instâncias de uma classe usando a palavra chave static. 
Essas variáveis estão no escopo da classe, e lá ficarão enquanto a classe estiver carregada na memória (enquanto o programa estiver rodando, na grande maioria dos casos).
Variáveis com o mesmo nome: Não é possível declarar no mesmo escopo com o mesmo nome, mas odemos ter variáveis em escopos diferentes que podem ser declaradas com o mesmo nome. 
Em casos em que possa haver ambiguidade na hora de declará-las, o próprio compilador irá emitir um erro evitando a confusão.
Shadowing: é permitido declarar variáveis locais ou parâmetros com o mesmo nome de variáveis de instância ou de classe. 

B) Defina a estrutura de uma classe Java
Pacotes: Pacotes servem para separar e organizar as diversas classes que temos em nossos sistemas. Todas as classes pertencem a um pacote, sendo que, 
caso o pacote não seja explicitamente declarado, a classe fará parte do que chamamos de pacote padrão, ou default package. Todas as classes no default 
package se enxergam e podem ser utilizadas entre si. Classes no pacote default não podem ser importadas para uso em outros pacotes.
Classe: Uma classe é a forma no Java onde definimos os atributos e comportamentos de um objeto.
Nomes dos membros: Variaveis, Métodos, Construtores, Métodos com o mesmo nome da classe, Interfaces, Multíplas estruturas em um arquivo, Pacotes e 
imports em arquivos com múltiplas estruturas.
Multíplas estruturas em um arquivo
Em java, é possível definir mais de uma classe/interface em um mesmo arquivo java, embora devamos seguir algumas regras:
-Podem ser definidos em qualquer ordem;
-Se existir alguma classe/interface pública, o nome do arquivo deve ser o mesmo dessa classe/interface;
-Só pode existir uma classe/interface pública por arquivo;
-Se não houver nenhuma classe/interface pública, o arquivo pode ter qualquer nome.

C)Crie aplicações Java executáveis com um método main
Método main: O tal método de entrada deve seguir algumas regras para ser executado pela JVM:
-Ser público (public);
-Ser estático (static);
-Não ter retorno (void);
-Ter o nome ::main::;
-Receber como parâmetro um array ou varargs de String (String[] ou String...).
Compilação e execução
-Para criar um programa java, é preciso escrever um código-fonte e, através de um compilador, gerar o executável (bytecode). O compilador do JDK é o ::javac::.
A execução do bytecode é feita pela JVM (::Java Virtual Machine::). O comando java invoca a máquina virtual para executar um programa java.
Propriedades na linha de comando
-java -Ddesenvolvedor=RafaelVieiraDaCunha PropriedadesParametros Adicionado
-import java.util.Properties;
-class PropriedadesParametros{
-    public static void main(String[] args){
-        Properties propriedade  =  System.getProperties();
-        propriedade.list(System.out);
-        System.out.println("Parametro "+args[0]);
-    }
-}
Com as opções -cp ou -classpath dos comandos javac ou java. javac -cp /diretorio/biblioteca.jar;/outrodir/ scjp/Prova.java
Para saber mais: arquivos JAR e META-INF/Manifest.mf: 
-javac ArquivoJar.java
-Criar o arquivo Manifest.txt e preenchido com "Main-Class: ArquivoJar<CR><LF>"
-jar cmf Manifest.txt ArquivoJar.jar ArquivoJar.class
-java -jar ArquivoJar.jar

D)Importe outros pacotes Java e deixe-os acessíveis ao seu código
